
import Foundation
import FirebaseFirestore

class FirestoreService {
    static let shared = FirestoreService()
    private let db = Firestore.firestore()
    private let CategoriesCollectionName = "courseCategories"
    private let CoursesCollectionName = "Courses"
    private let LessonsCollectionName = "Lessons"
    
    private init() {}


    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫—É—Ä—Å–æ–≤
    func fetchCategories(completion: @escaping ([(name: String, imageUrl: String)]?, Error?) -> Void) {
        db.collection(CategoriesCollectionName).getDocuments { snapshot, error in
            if let error = error {
                completion(nil, error)
                return
            }
            
            guard let documents = snapshot?.documents else {
                completion([], nil)
                return
            }
            
            let categories = documents.compactMap { doc -> (String, String)? in
                let name = doc["name"] as? String ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                let imageUrl = doc["imageUrl"] as? String ?? ""
                return (name, imageUrl)
            }
            
            completion(categories, nil)
        }
    }

    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    func getCategoryReference(for categoryName: String, completion: @escaping (DocumentReference?) -> Void) {
        db.collection(CategoriesCollectionName)
            .whereField("name", isEqualTo: categoryName)
            .getDocuments { snapshot, error in
                if let error = error {
                    print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è reference –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \(categoryName): \(error.localizedDescription)")
                    completion(nil)
                    return
                }
                
                guard let document = snapshot?.documents.first else {
                    print("–ö–∞—Ç–µ–≥–æ—Ä–∏—è \(categoryName) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    completion(nil)
                    return
                }
                
                completion(document.reference)
            }
    }


    
    func fetchCourses(for categoryName: String, completion: @escaping ([Course]?, Error?) -> Void) {
        getCategoryReference(for: categoryName) { [weak self] categoryRef in
            guard let self = self, let categoryRef = categoryRef else {
                print("‚ùå –û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è \(categoryName) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                completion([], nil)
                return
            }
            
            print("üîó –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: \(categoryRef.path), –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã...")
            
            self.db.collection(self.CoursesCollectionName)
                .whereField("courseCategory", isEqualTo: categoryRef) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ DocumentReference
                .getDocuments { snapshot, error in
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: \(error.localizedDescription)")
                        completion(nil, error)
                        return
                    }
                    
                    guard let documents = snapshot?.documents else {
                        print("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫—É—Ä—Å–æ–≤ –≤ Firestore")
                        completion([], nil)
                        return
                    }
                    
                    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: \(documents.count)")
                    
                    let courses = documents.compactMap { doc -> Course? in
                        let id = doc.documentID
                        let name = doc["name"] as? String ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        let imageUrl = doc["imageUrl"] as? String ?? ""
                        let course = Course(id: id, name: name, imageURL: imageUrl)
                        return course
                    }
                    
                    print("üìå –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: \(courses.count)")
                    completion(courses, nil)
                }
        }
    }


    
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –∏–∑ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏ Lessons –∫—É—Ä—Å–∞ –ø–æ –µ–≥–æ ID
    func fetchLessons(for courseId: String, completion: @escaping ([Lesson]?, Error?) -> Void) {
       // –®–∞–≥ 1: –ù–∞–π—Ç–∏ –∫—É—Ä—Å –ø–æ ID –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Courses
       db.collection(CoursesCollectionName).document(courseId).getDocument { (document, error) in
           if let error = error {
               print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫—É—Ä—Å–∞: \(error.localizedDescription)")
               completion(nil, error)
               return
           }
           
           guard let document = document, document.exists else {
               print("–ö—É—Ä—Å —Å ID \(courseId) –Ω–µ –Ω–∞–π–¥–µ–Ω")
               completion(nil, nil)
               return
           }
           
           // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏—é Lessons
           let courseReference = document.reference
           courseReference.collection("Lessons").getDocuments { (snapshot, error) in
               if let error = error {
                   print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤: \(error.localizedDescription)")
                   completion(nil, error)
                   return
               }
               
               // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É—Ä–æ–∫–æ–≤
               var lessons: [Lesson] = []
               
               snapshot?.documents.forEach { doc in
                   let id = doc.documentID
                   let name = doc["name"] as? String ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                   let topics = doc["topics"] as? [String]
                   let orderNumber = doc["order"] as? Int ?? 0
                   let lesson = Lesson(id: id, name: name, topics: topics ?? [], orderNumber: orderNumber)
                   lessons.append(lesson)
               }
               let sortedLessons: [Lesson] = lessons.sorted { (lesson1: Lesson, lesson2: Lesson) in
                   lesson1.orderNumber < lesson2.orderNumber
               }


               print("–ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: \(lessons.count)")
               completion(sortedLessons, nil)
           }
       }
       }
    
    
    func getFavouriteCourses(completion: @escaping ([Course]?, Error?) -> Void) {
        print("–ú–µ—Ç–æ–¥ getFavouriteCourses –≤—ã–∑–≤–∞–Ω") // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞
        
        guard let userID = AuthenticationService.shared.getCurrentUserID() else {
            return
        }
        
        let userRef = Firestore.firestore().collection("users").document(userID)
        
        userRef.getDocument { document, error in
            if let error = error {
                print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: \(error.localizedDescription)")
                completion(nil, error)
                return
            }

            guard let document = document, document.exists else {
                completion([], nil)
                return
            }

            guard let data = document.data(),
                  let favouriteCourseIDs = data["favourite"] as? [String] else {
                completion([], nil)
                return
            }

            // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –ø–æ –∏—Ö ID
            var courses: [Course] = []
            let dispatchGroup = DispatchGroup()

            for courseID in favouriteCourseIDs {
                dispatchGroup.enter()
                let courseRef = Firestore.firestore().collection("Courses").document(courseID)
                
                courseRef.getDocument { courseDocument, error in
                    if let error = error {
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: \(error.localizedDescription)")
                    } else if let courseDocument = courseDocument, courseDocument.exists,
                              let courseData = courseDocument.data() {
                        let id = courseDocument.documentID
                        let name = courseData["name"] as? String ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å"
                        let imageURL = courseData["imageURL"] as? String ?? ""
                        
                        let course = Course(id: id, name: name, imageURL: imageURL)
                        courses.append(course)
                    }
                    dispatchGroup.leave()
                }
            }

            dispatchGroup.notify(queue: .main) {
                completion(courses, nil)
            }
        }
    }

    func addCourseToFavourite(_ course: Course, completion: @escaping (Bool) -> Void) {
        guard let userId = AuthenticationService.shared.getCurrentUserID()  else {
               completion(false)
               return
           }
           let userRef = Firestore.firestore().collection("users").document(userId)
                
            userRef.updateData([
                    "favourite": FieldValue.arrayUnion([course.id])
                ]) { error in
                    if let error = error {
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: \(error.localizedDescription)")
                        completion(false)
                    } else {
                        completion(true)
                    }
                }
       }
       
       // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    func removeCourseFromFavourite(_ course: Course, completion: @escaping (Bool) -> Void) {
        guard let userId = AuthenticationService.shared.getCurrentUserID()  else {
               completion(false)
               return
           }
            
            let userRef = Firestore.firestore().collection("users").document(userId)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ favouriteCourses, —É–¥–∞–ª—è—è —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å
            userRef.updateData([
                "favourite": FieldValue.arrayRemove([course.id])
            ]) { error in
                if let error = error {
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: \(error.localizedDescription)")
                    completion(false)
                } else {
                    completion(true)
                }
            }
        }
}
